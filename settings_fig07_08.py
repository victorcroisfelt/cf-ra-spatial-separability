########################################
#   setting_fig07.py
#
#   Description. Script used to define the settings of Figs. 07 (c)
#	07 (d), and Fig. 08.
#
#   Author. @victorcroisfelt
#
#   Date. December 30, 2021
#
#   This code is part of the code package used to generate the numeric results
#   of the paper:
#
#   Croisfelt, V., Abrão, T., and Marinello, J. C., “User-Centric Perspective in
#   Random Access Cell-Free Aided by Spatial Separability”, arXiv e-prints, 2021.
#
#   Available on:
#
#                   https://arxiv.org/abs/2107.10294
#
#   Comment. This code is used in 
#
#		- lookup_fig07_08_Lmax_practical
#       - data_fig07_08_bcf.py
#       - data_fig07_08_cellular.py
#       - plot_fig07_08_cellfree.py
#
#   to actually plot the figure using the data generated by this script.
########################################
import numpy as np

import warnings

########################################
# Preamble
########################################
np.random.seed(42)

# Comment the line below to see possible warnings related to python version 
# issues
warnings.filterwarnings("ignore")

########################################
# System parameters
########################################

# Define number of APs
L = 64

# Define number of BS antennas
M = 64

# Define number of antennas per AP
N = 8

# UL transmit power
p = 100

# DL transmit power
q = 200

# DL transmit power per AP
ql = 200/L

# Define noise power
sigma2 = 1

# Number of RA pilot signals
taup = 5

########################################
# Geometry
########################################

# Define square length
squareLength = 400

# Create square grid of APs
APperdim = int(np.sqrt(L))
APpositions = np.linspace(squareLength/APperdim, squareLength, APperdim) - squareLength/APperdim/2
APpositions = APpositions + 1j*APpositions[:, None]
APpositions = APpositions.reshape(L)

# Define BS position
BSposition = (squareLength/2)*(1 + 1j)

########################################
# SUCRe parameters
########################################

# Probability of access
pA = 0.001

# Maximum number of attempts to send RA pilots before a UE gives up
maxAttempts = 10

# Probability of retransmitting an RA pilot in each follow RA block, when the
# first transmission was failed
tryAgainProb = 0.5

########################################
# Simulation parameters
########################################

# Set the number of RA blocks
numRAblocks = 10000

# Range of number of inactive users
K0values = np.concatenate((np.array([1e2]), np.arange(2.5e2, 1e4, 2.5e2),
 np.arange(1e4, 1.5e4, 5e2, dtype=np.uint), np.arange(1.5e4, 5.1e4, 1e3))).astype(int)